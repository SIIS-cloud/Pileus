diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/acceptparse.py webob/acceptparse.py
--- original/WebOb-1.2.3/webob/acceptparse.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/acceptparse.py	2016-04-10 19:33:29.867207390 -0400
@@ -279,6 +279,10 @@
                 continue
             if mask_major == '*' and mask_minor != '*':
                 continue
+            if mask_major != "*" and "*" in mask_major:
+                continue
+            if mask_minor != "*" and "*" in mask_minor:
+                continue
             yield ("%s/%s" % (mask_major, mask_minor), q)
 
     def accept_html(self):
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/cachecontrol.py webob/cachecontrol.py
--- original/WebOb-1.2.3/webob/cachecontrol.py	2011-10-13 13:46:19.000000000 -0400
+++ webob/cachecontrol.py	2016-04-10 19:33:29.859207212 -0400
@@ -226,4 +226,3 @@
             value = '"%s"' % value
         parts.append('%s=%s' % (name, value))
     return ', '.join(parts)
-
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/client.py webob/client.py
--- original/WebOb-1.2.3/webob/client.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/client.py	2016-04-10 19:33:29.859207212 -0400
@@ -179,4 +179,3 @@
 _e_refused = (errno.ECONNREFUSED,)
 if hasattr(errno, 'ENODATA'): # pragma: no cover
     _e_refused += (errno.ENODATA,)
-
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/cookies.py webob/cookies.py
--- original/WebOb-1.2.3/webob/cookies.py	2012-02-18 10:42:07.000000000 -0500
+++ webob/cookies.py	2016-04-10 19:33:29.867207390 -0400
@@ -1,5 +1,10 @@
 import collections
 
+import base64
+import binascii
+import hashlib
+import hmac
+import json
 from datetime import (
     date,
     datetime,
@@ -18,7 +23,10 @@
     string_types,
     )
 
-__all__ = ['Cookie']
+from webob.util import strings_differ
+
+__all__ = ['Cookie', 'CookieProfile', 'SignedCookieProfile', 'SignedSerializer',
+           'JSONSerializer', 'make_cookie']
 
 _marker = object()
 
@@ -51,7 +59,7 @@
         if value is None:
             replacement = None
         else:
-            bytes_val = _quote(bytes_(value, 'utf-8'))
+            bytes_val = _value_quote(bytes_(value, 'utf-8'))
             replacement = bytes_name + b'=' + bytes_val
         matches = _rx_cookie.finditer(header)
         found = False
@@ -89,9 +97,9 @@
         except UnicodeEncodeError:
             raise TypeError('cookie name must be encodable to ascii')
         if not _valid_cookie_name(bytes_cookie_name):
-            raise TypeError('cookie name must be valid according to RFC 2109')
+            raise TypeError('cookie name must be valid according to RFC 6265')
         return name
-            
+
     def __setitem__(self, name, value):
         name = self._valid_cookie_name(name)
         if not isinstance(value, string_types):
@@ -149,7 +157,8 @@
 
     def __repr__(self):
         return '<RequestCookies (dict-like) with values %r>' % (self._cache,)
-    
+
+
 class Cookie(dict):
     def __init__(self, input=None):
         if input:
@@ -230,10 +239,9 @@
 class Morsel(dict):
     __slots__ = ('name', 'value')
     def __init__(self, name, value):
-        assert _valid_cookie_name(name)
-        assert isinstance(value, bytes)
-        self.name = name
-        self.value = value
+        self.name = bytes_(name, encoding='ascii')
+        self.value = bytes_(value, encoding='ascii')
+        assert _valid_cookie_name(self.name)
         self.update(dict.fromkeys(_c_keys, None))
 
     path = cookie_property(b'path')
@@ -252,12 +260,15 @@
     def serialize(self, full=True):
         result = []
         add = result.append
-        add(self.name + b'=' + _quote(self.value))
+        add(self.name + b'=' + _value_quote(self.value))
         if full:
             for k in _c_valkeys:
                 v = self[k]
                 if v:
-                    add(_c_renames[k]+b'='+_quote(v))
+                    info = _c_renames[k]
+                    name = info['name']
+                    quoter = info['quoter']
+                    add(name + b'=' + quoter(v))
             expires = self[b'expires']
             if expires:
                 add(b'expires=' + expires)
@@ -275,19 +286,6 @@
             native_(self.value)
         )
 
-_c_renames = {
-    b"path" : b"Path",
-    b"comment" : b"Comment",
-    b"domain" : b"Domain",
-    b"max-age" : b"Max-Age",
-}
-_c_valkeys = sorted(_c_renames)
-_c_keys = set(_c_renames)
-_c_keys.update([b'expires', b'secure', b'httponly'])
-
-
-
-
 #
 # parsing
 #
@@ -313,8 +311,8 @@
 )
 _ch_unquote_map.update((v, v) for v in list(_ch_unquote_map.values()))
 
-_b_dollar_sign = 36 if PY3 else '$'
-_b_quote_mark = 34 if PY3 else '"'
+_b_dollar_sign = ord('$') if PY3 else '$'
+_b_quote_mark = ord('"') if PY3 else '"'
 
 def _unquote(v):
     #assert isinstance(v, bytes)
@@ -331,20 +329,32 @@
 #
 
 # these chars can be in cookie value w/o causing it to be quoted
-_no_escape_special_chars = "!#$%&'*+-.^_`|~/"
+# see http://tools.ietf.org/html/rfc6265#section-4.1.1
+# and https://github.com/Pylons/webob/pull/104#issuecomment-28044314
+
+# allowed in cookie values without quoting:
+# <space> (0x21), "#$%&'()*+" (0x25-0x2B), "-./0123456789:" (0x2D-0x3A),
+# "<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[" (0x3C-0x5B),
+# "]^_`abcdefghijklmnopqrstuvwxyz{|}~" (0x5D-0x7E)
+
+_no_escape_special_chars = "!#$%&'()*+-./<=>?@[]^_`{|}~"
 _no_escape_chars = (string.ascii_letters + string.digits +
                     _no_escape_special_chars)
 _no_escape_bytes = bytes_(_no_escape_chars)
-# these chars never need to be quoted
+
+# these chars should not be quoted themselves but if they are present they
+# should cause the cookie value to be surrounded by quotes (voodoo inherited
+# by old webob code without any comments)
 _escape_noop_chars = _no_escape_chars + ': '
+
 # this is a map used to escape the values
 _escape_map = dict((chr(i), '\\%03o' % i) for i in range(256))
 _escape_map.update(zip(_escape_noop_chars, _escape_noop_chars))
-_escape_map['"'] = r'\"'
-_escape_map['\\'] = r'\\'
 if PY3: # pragma: no cover
     # convert to {int -> bytes}
-    _escape_map = dict((ord(k), bytes_(v, 'ascii')) for k, v in _escape_map.items())
+    _escape_map = dict(
+        (ord(k), bytes_(v, 'ascii')) for k, v in _escape_map.items()
+        )
 _escape_char = _escape_map.__getitem__
 
 weekdays = ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')
@@ -353,18 +363,484 @@
 
 _notrans_binary = b' '*256
 
-def _needs_quoting(v):
+# these are the characters accepted in cookie *names*
+_valid_token_chars = string.ascii_letters + string.digits + "!#$%&'*+,-.^_`|~"
+_valid_token_bytes = bytes_(_valid_token_chars)
+
+def _value_needs_quoting(v):
     return v.translate(_notrans_binary, _no_escape_bytes)
 
-def _quote(v):
+def _value_quote(v):
     #assert isinstance(v, bytes)
-    if _needs_quoting(v):
+    if _value_needs_quoting(v):
         return b'"' + b''.join(map(_escape_char, v)) + b'"'
     return v
 
 def _valid_cookie_name(key):
     return isinstance(key, bytes) and not (
-        _needs_quoting(key)
+        key.translate(_notrans_binary, _valid_token_bytes)
         or key[0] == _b_dollar_sign
         or key.lower() in _c_keys
     )
+
+def _path_quote(v):
+    return b''.join(map(_escape_char, v))
+
+_domain_quote = _path_quote
+_max_age_quote = _path_quote
+
+_c_renames = {
+    b"path" : {'name':b"Path", 'quoter':_path_quote},
+    b"comment" : {'name':b"Comment", 'quoter':_value_quote},
+    b"domain" : {'name':b"Domain", 'quoter':_domain_quote},
+    b"max-age" : {'name':b"Max-Age", 'quoter':_max_age_quote},
+    }
+_c_valkeys = sorted(_c_renames)
+_c_keys = set(_c_renames)
+_c_keys.update([b'expires', b'secure', b'httponly'])
+
+
+def make_cookie(name, value, max_age=None, path='/', domain=None,
+                secure=False, httponly=False, comment=None):
+    """ Generate a cookie value.  If ``value`` is None, generate a cookie value
+    with an expiration date in the past"""
+    
+    # We are deleting the cookie, override max_age and expires
+    if value is None:
+        value = b''
+        # Note that the max-age value of zero is technically contraspec;
+        # RFC6265 says that max-age cannot be zero.  However, all browsers
+        # appear to support this to mean "delete immediately".
+        # http://www.timwilson.id.au/news-three-critical-problems-with-rfc6265.html
+        max_age = 0
+        expires = 'Wed, 31-Dec-97 23:59:59 GMT'
+
+    # Convert max_age to seconds
+    elif isinstance(max_age, timedelta):
+        max_age = (max_age.days * 60 * 60 * 24) + max_age.seconds
+        expires = max_age
+    else:
+        expires = max_age
+
+    morsel = Morsel(name, value)
+
+    if domain is not None:
+        morsel.domain = bytes_(domain)
+    if path is not None:
+        morsel.path = bytes_(path)
+    if httponly:
+        morsel.httponly = True
+    if secure:
+        morsel.secure = True
+    if max_age is not None:
+        morsel.max_age = max_age
+    if expires is not None:
+        morsel.expires = expires
+    if comment is not None:
+        morsel.comment = bytes_(comment)
+    return morsel.serialize()
+
+class JSONSerializer(object):
+    """ A serializer which uses `json.dumps`` and ``json.loads``"""
+    def dumps(self, appstruct):
+        return bytes_(json.dumps(appstruct), encoding='utf-8')
+
+    def loads(self, bstruct):
+        # NB: json.loads raises ValueError if no json object can be decoded
+        # so we don't have to do it explicitly here.
+        return json.loads(text_(bstruct, encoding='utf-8'))
+
+class SignedSerializer(object):
+    """
+    A helper to cryptographically sign arbitrary content using HMAC.
+
+    The serializer accepts arbitrary functions for performing the actual
+    serialization and deserialization.
+
+    ``secret``
+      A string which is used to sign the cookie. The secret should be at
+      least as long as the block size of the selected hash algorithm. For
+      ``sha512`` this would mean a 128 bit (64 character) secret.
+
+    ``salt``
+      A namespace to avoid collisions between different uses of a shared
+      secret.
+
+    ``hashalg``
+      The HMAC digest algorithm to use for signing. The algorithm must be
+      supported by the :mod:`hashlib` library. Default: ``'sha512'``.
+
+    ``serializer``
+      An object with two methods: `loads`` and ``dumps``.  The ``loads`` method
+      should accept bytes and return a Python object.  The ``dumps`` method
+      should accept a Python object and return bytes.  A ``ValueError`` should
+      be raised for malformed inputs.  Default: ``None`, which will use a
+      derivation of :func:`json.dumps` and ``json.loads``.
+
+    """
+
+    def __init__(self,
+                 secret,
+                 salt,
+                 hashalg='sha512',
+                 serializer=None,
+                 ):
+        self.salt = salt
+        self.secret = secret
+        self.hashalg = hashalg
+
+        self.salted_secret = bytes_(salt or '') + bytes_(secret)
+
+        self.digestmod = lambda string=b'': hashlib.new(self.hashalg, string)
+        self.digest_size = self.digestmod().digest_size
+
+        if serializer is None:
+            serializer = JSONSerializer()
+
+        self.serializer = serializer
+
+    def dumps(self, appstruct):
+        """
+        Given an ``appstruct``, serialize and sign the data.
+
+        Returns a bytestring.
+        """
+        cstruct = self.serializer.dumps(appstruct) # will be bytes
+        sig = hmac.new(self.salted_secret, cstruct, self.digestmod).digest()
+        return base64.urlsafe_b64encode(sig + cstruct).rstrip(b'=')
+
+    def loads(self, bstruct):
+        """
+        Given a ``bstruct`` (a bytestring), verify the signature and then
+        deserialize and return the deserialized value.
+
+        A ``ValueError`` will be raised if the signature fails to validate.
+        """
+        try:
+            b64padding = b'=' * (-len(bstruct) % 4)
+            fstruct = base64.urlsafe_b64decode(bytes_(bstruct) + b64padding)
+        except (binascii.Error, TypeError) as e:
+            raise ValueError('Badly formed base64 data: %s' % e)
+
+        cstruct = fstruct[self.digest_size:]
+        expected_sig = fstruct[:self.digest_size]
+
+        sig = hmac.new(
+            self.salted_secret, bytes_(cstruct), self.digestmod).digest()
+
+        if strings_differ(sig, expected_sig):
+            raise ValueError('Invalid signature')
+
+        return self.serializer.loads(cstruct)
+
+
+_default = object()
+
+class CookieProfile(object):
+    """
+    A helper class that helps bring some sanity to the insanity that is cookie
+    handling.
+
+    The helper is capable of generating multiple cookies if necessary to
+    support subdomains and parent domains.
+
+    ``cookie_name``
+      The name of the cookie used for sessioning. Default: ``'session'``.
+
+    ``max_age``
+      The maximum age of the cookie used for sessioning (in seconds).
+      Default: ``None`` (browser scope).
+
+    ``secure``
+      The 'secure' flag of the session cookie. Default: ``False``.
+
+    ``httponly``
+      Hide the cookie from Javascript by setting the 'HttpOnly' flag of the
+      session cookie. Default: ``False``.
+
+    ``path``
+      The path used for the session cookie. Default: ``'/'``.
+
+    ``domains``
+      The domain(s) used for the session cookie. Default: ``None`` (no domain).
+      Can be passed an iterable containing multiple domains, this will set
+      multiple cookies one for each domain.
+
+    ``serializer``
+      An object with two methods: `loads`` and ``dumps``.  The ``loads`` method
+      should accept a bytestring and return a Python object.  The ``dumps``
+      method should accept a Python object and return bytes.  A ``ValueError``
+      should be raised for malformed inputs.  Default: ``None`, which will use
+      a derivation of :func:`json.dumps` and ``json.loads``.
+
+    """
+
+    def __init__(self,
+                 cookie_name,
+                 secure=False,
+                 max_age=None,
+                 httponly=None,
+                 path='/',
+                 domains=None,
+                 serializer=None
+                 ):
+        self.cookie_name = cookie_name
+        self.secure = secure
+        self.max_age = max_age
+        self.httponly = httponly
+        self.path = path
+        self.domains = domains
+
+        if serializer is None:
+            serializer = JSONSerializer()
+
+        self.serializer = serializer
+        self.request = None
+
+    def __call__(self, request):
+        """ Bind a request to a copy of this instance and return it"""
+
+        return self.bind(request)
+
+    def bind(self, request):
+        """ Bind a request to a copy of this instance and return it"""
+
+        selfish = CookieProfile(
+            self.cookie_name,
+            self.secure,
+            self.max_age,
+            self.httponly,
+            self.path,
+            self.domains,
+            self.serializer,
+            )
+        selfish.request = request
+        return selfish
+
+    def get_value(self):
+        """ Looks for a cookie by name in the currently bound request, and
+        returns its value.  If the cookie profile is not bound to a request,
+        this method will raise a :exc:`ValueError`.
+
+        Looks for the cookie in the cookies jar, and if it can find it it will
+        attempt to deserialize it.  Returns ``None`` if there is no cookie or
+        if the value in the cookie cannot be successfully deserialized.
+        """
+
+        if not self.request:
+            raise ValueError('No request bound to cookie profile')
+
+        cookie = self.request.cookies.get(self.cookie_name)
+
+        if cookie is not None:
+            try:
+                return self.serializer.loads(bytes_(cookie))
+            except ValueError:
+                return None
+
+    def set_cookies(self, response, value, domains=_default, max_age=_default,
+                    path=_default, secure=_default, httponly=_default):
+        """ Set the cookies on a response."""
+        cookies = self.get_headers(
+            value,
+            domains=domains,
+            max_age=max_age,
+            path=path,
+            secure=secure,
+            httponly=httponly
+            )
+        response.headerlist.extend(cookies)
+        return response
+
+    def get_headers(self, value, domains=_default, max_age=_default,
+                    path=_default, secure=_default, httponly=_default):
+        """ Retrieve raw headers for setting cookies.
+
+        Returns a list of headers that should be set for the cookies to
+        be correctly tracked.
+        """
+        if value is None:
+            max_age = 0
+            bstruct = None
+        else:
+            bstruct = self.serializer.dumps(value)
+
+        return self._get_cookies(
+            bstruct,
+            domains=domains,
+            max_age=max_age,
+            path=path,
+            secure=secure,
+            httponly=httponly
+            )
+
+    def _get_cookies(self, value, domains, max_age, path, secure, httponly):
+        """Internal function
+
+        This returns a list of cookies that are valid HTTP Headers.
+
+        :environ: The request environment
+        :value: The value to store in the cookie
+        :domains: The domains, overrides any set in the CookieProfile
+        :max_age: The max_age, overrides any set in the CookieProfile
+        :path: The path, overrides any set in the CookieProfile
+        :secure: Set this cookie to secure, overrides any set in CookieProfile
+        :httponly: Set this cookie to HttpOnly, overrides any set in CookieProfile
+
+        """
+
+        # If the user doesn't provide values, grab the defaults
+        if domains is _default:
+            domains = self.domains
+
+        if max_age is _default:
+            max_age = self.max_age
+
+        if path is _default:
+            path = self.path
+
+        if secure is _default:
+            secure = self.secure
+
+        if httponly is _default:
+            httponly = self.httponly
+
+        # Length selected based upon http://browsercookielimits.x64.me
+        if value is not None and len(value) > 4093:
+            raise ValueError(
+                'Cookie value is too long to store (%s bytes)' %
+                len(value)
+            )
+
+        cookies = []
+
+        if not domains:
+            cookievalue = make_cookie(
+                    self.cookie_name,
+                    value,
+                    path=path,
+                    max_age=max_age,
+                    httponly=httponly,
+                    secure=secure
+            )
+            cookies.append(('Set-Cookie', cookievalue))
+
+        else:
+            for domain in domains:
+                cookievalue = make_cookie(
+                    self.cookie_name,
+                    value,
+                    path=path,
+                    domain=domain,
+                    max_age=max_age,
+                    httponly=httponly,
+                    secure=secure,
+                )
+                cookies.append(('Set-Cookie', cookievalue))
+
+        return cookies
+
+
+class SignedCookieProfile(CookieProfile):
+    """
+    A helper for generating cookies that are signed to prevent tampering.
+
+    By default this will create a single cookie, given a value it will
+    serialize it, then use HMAC to cryptographically sign the data. Finally
+    the result is base64-encoded for transport. This way a remote user can
+    not tamper with the value without uncovering the secret/salt used.
+
+    ``secret``
+      A string which is used to sign the cookie. The secret should be at
+      least as long as the block size of the selected hash algorithm. For
+      ``sha512`` this would mean a 128 bit (64 character) secret.
+
+    ``salt``
+      A namespace to avoid collisions between different uses of a shared
+      secret. 
+
+    ``hashalg``
+      The HMAC digest algorithm to use for signing. The algorithm must be
+      supported by the :mod:`hashlib` library. Default: ``'sha512'``.
+
+    ``cookie_name``
+      The name of the cookie used for sessioning. Default: ``'session'``.
+
+    ``max_age``
+      The maximum age of the cookie used for sessioning (in seconds).
+      Default: ``None`` (browser scope).
+
+    ``secure``
+      The 'secure' flag of the session cookie. Default: ``False``.
+
+    ``httponly``
+      Hide the cookie from Javascript by setting the 'HttpOnly' flag of the
+      session cookie. Default: ``False``.
+
+    ``path``
+      The path used for the session cookie. Default: ``'/'``.
+
+    ``domains``
+      The domain(s) used for the session cookie. Default: ``None`` (no domain).
+      Can be passed an iterable containing multiple domains, this will set
+      multiple cookies one for each domain.
+
+    ``serializer``
+      An object with two methods: `loads`` and ``dumps``.  The ``loads`` method
+      should accept bytes and return a Python object.  The ``dumps`` method
+      should accept a Python object and return bytes.  A ``ValueError`` should
+      be raised for malformed inputs.  Default: ``None`, which will use a
+      derivation of :func:`json.dumps` and ``json.loads``.
+    """
+    def __init__(self,
+                 secret,
+                 salt,
+                 cookie_name,
+                 secure=False,
+                 max_age=None,
+                 httponly=False,
+                 path="/",
+                 domains=None,
+                 hashalg='sha512',
+                 serializer=None,
+                 ):
+        self.secret = secret
+        self.salt = salt
+        self.hashalg = hashalg
+        self.original_serializer = serializer
+
+        signed_serializer = SignedSerializer(
+            secret,
+            salt,
+            hashalg,
+            serializer=self.original_serializer,
+            )
+        CookieProfile.__init__(
+            self,
+            cookie_name,
+            secure=secure,
+            max_age=max_age,
+            httponly=httponly,
+            path=path,
+            domains=domains,
+            serializer=signed_serializer,
+            )
+
+    def bind(self, request):
+        """ Bind a request to a copy of this instance and return it"""
+
+        selfish = SignedCookieProfile(
+            self.secret,
+            self.salt,
+            self.cookie_name,
+            self.secure,
+            self.max_age,
+            self.httponly,
+            self.path,
+            self.domains,
+            self.hashalg,
+            self.original_serializer,
+            )
+        selfish.request = request
+        return selfish
+
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/datetime_utils.py webob/datetime_utils.py
--- original/WebOb-1.2.3/webob/datetime_utils.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/datetime_utils.py	2016-04-10 19:33:29.855207124 -0400
@@ -114,4 +114,3 @@
         return str(int(value))
     else:
         return serialize_date(value)
-
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/dec.py webob/dec.py
--- original/WebOb-1.2.3/webob/dec.py	2012-01-31 11:47:47.000000000 -0500
+++ webob/dec.py	2016-04-10 19:33:29.859207212 -0400
@@ -122,6 +122,7 @@
             environ = req
             start_response = args[0]
             req = self.RequestClass(environ)
+
             req.response = req.ResponseClass()
             try:
                 args = self.args
@@ -141,6 +142,7 @@
                 resp.write(body)
             if resp is not req.response:
                 resp = req.response.merge_cookies(resp)
+
             return resp(environ, start_response)
         else:
             if self.middleware_wraps:
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/descriptors.py webob/descriptors.py
--- original/WebOb-1.2.3/webob/descriptors.py	2012-01-31 11:47:47.000000000 -0500
+++ webob/descriptors.py	2016-04-10 19:33:29.863207302 -0400
@@ -336,4 +336,3 @@
         assert isinstance(params, str)
         return '%s %s' % (authtype, params)
     return val
-
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/exc.py webob/exc.py
--- original/WebOb-1.2.3/webob/exc.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/exc.py	2016-04-10 19:33:29.859207212 -0400
@@ -960,6 +960,25 @@
     explanation = (
         'The request header fields were too large')
 
+class HTTPUnavailableForLegalReasons(HTTPClientError):
+    """
+    subclass of :class:`~HTTPClientError`
+
+    This indicates that the server is unable to process the request
+    because of legal reasons, e.g. censorship or government-mandated
+    blocked access.
+
+    From the draft "A New HTTP Status Code for Legally-restricted Resources"
+    by Tim Bray:
+
+    http://tools.ietf.org/html/draft-tbray-http-legally-restricted-status-00
+
+    code: 451, title: Unavailable For Legal Reasons
+    """
+    code = 451
+    title = 'Unavailable For Legal Reasons'
+    explanation = ('The resource is not available due to legal reasons.')
+
 ############################################################
 ## 5xx Server Error
 ############################################################
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/multidict.py webob/multidict.py
--- original/WebOb-1.2.3/webob/multidict.py	2012-10-11 14:05:10.000000000 -0400
+++ webob/multidict.py	2016-04-10 19:33:29.859207212 -0400
@@ -115,11 +115,7 @@
         """
         Return a list of all values matching the key (may be an empty list)
         """
-        result = []
-        for k, v in self._items:
-            if key == k:
-                result.append(v)
-        return result
+        return [v for k, v in self._items if k == key]
 
     def getone(self, key):
         """
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/request.py webob/request.py
--- original/WebOb-1.2.3/webob/request.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/request.py	2016-04-10 19:33:29.867207390 -0400
@@ -92,7 +92,7 @@
 http_method_probably_has_body = dict.fromkeys(
     ('GET', 'HEAD', 'DELETE', 'TRACE'), False)
 http_method_probably_has_body.update(
-    dict.fromkeys(('POST', 'PUT'), True))
+    dict.fromkeys(('POST', 'PUT', 'PATCH'), True))
 
 _LATIN_ENCODINGS = (
     'ascii', 'latin-1', 'latin', 'latin_1', 'l1', 'latin1',
@@ -668,6 +668,30 @@
             del self.environ['HTTP_HOST']
     host = property(_host__get, _host__set, _host__del, doc=_host__get.__doc__)
 
+    @property
+    def domain(self):
+        """ Returns the domain portion of the host value.  Equivalent to:
+
+        .. code-block:: python
+
+           domain = request.host
+           if ':' in domain:
+               domain = domain.split(':', 1)[0]
+
+        This will be equivalent to the domain portion of the ``HTTP_HOST``
+        value in the environment if it exists, or the ``SERVER_NAME`` value in
+        the environment if it doesn't.  For example, if the environment
+        contains an ``HTTP_HOST`` value of ``foo.example.com:8000``,
+        ``request.domain`` will return ``foo.example.com``.
+
+        Note that this value cannot be *set* on the request.  To set the host
+        value use :meth:`webob.request.Request.host` instead.
+        """
+        domain = self.host
+        if ':' in domain:
+             domain = domain.split(':', 1)[0]
+        return domain
+
     def _body__get(self):
         """
         Return the content of the request body.
@@ -740,11 +764,11 @@
         Return a MultiDict containing all the variables from a form
         request. Returns an empty dict-like object for non-form requests.
 
-        Form requests are typically POST requests, however PUT requests with
-        an appropriate Content-Type are also supported.
+        Form requests are typically POST requests, however PUT & PATCH requests
+        with an appropriate Content-Type are also supported.
         """
         env = self.environ
-        if self.method not in ('POST', 'PUT'):
+        if self.method not in ('POST', 'PUT', 'PATCH'):
             return NoVars('Not a form request')
         if 'webob._parsed_post_vars' in env:
             vars, body_file = env['webob._parsed_post_vars']
@@ -1257,6 +1281,9 @@
                 reraise(exc_info)
             captured[:] = [status, headers, exc_info]
             return output.append
+        # SYQ: for forked process to pass back captured content
+        self.environ['captured'] = captured
+        
         app_iter = application(self.environ, start_response)
         if output or not captured:
             try:
@@ -1455,7 +1482,7 @@
         env['REQUEST_METHOD'] = 'POST'
     has_files = False
     if hasattr(data, 'items'):
-        data = sorted(data.items())
+        data = list(data.items())
         for k, v in data:
             if isinstance(v, (tuple, list)):
                 has_files = True
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/response.py webob/response.py
--- original/WebOb-1.2.3/webob/response.py	2012-10-11 13:15:26.000000000 -0400
+++ webob/response.py	2016-04-10 19:33:29.859207212 -0400
@@ -1277,8 +1277,18 @@
     for item in app_iter:
         size += len(item)
         crc = zlib.crc32(item, crc) & 0xffffffff
-        yield compress.compress(item)
-    yield compress.flush()
+
+        # The compress function may return zero length bytes if the input is
+        # small enough; it buffers the input for the next iteration or for a
+        # flush.
+        result = compress.compress(item)
+        if result:
+            yield result
+
+    # Similarly, flush may also not yield a value.
+    result = compress.flush()
+    if result:
+        yield result
     yield struct.pack("<2L", crc, size & 0xffffffff)
 
 def _error_unicode_in_app_iter(app_iter, body):
diff -uNr -x '*.pyc' original/WebOb-1.2.3/webob/util.py webob/util.py
--- original/WebOb-1.2.3/webob/util.py	2012-01-25 15:13:55.000000000 -0500
+++ webob/util.py	2016-04-10 19:33:29.859207212 -0400
@@ -110,6 +110,10 @@
     423: 'Locked',
     424: 'Failed Dependency',
     426: 'Upgrade Required',
+    428: 'Precondition Required',
+    429: 'Too Many Requests',
+    451: 'Unavailable for Legal Reasons',
+    431: 'Request Header Fields Too Large',
 
     # Server Error
     500: 'Internal Server Error',
@@ -120,6 +124,7 @@
     505: 'HTTP Version Not Supported',
     507: 'Insufficient Storage',
     510: 'Not Extended',
+    511: 'Network Authentication Required',
 }
 
 # generic class responses as per RFC2616
@@ -130,3 +135,23 @@
     4: 'Unknown Client Error',
     5: 'Unknown Server Error',
 }
+
+def strings_differ(string1, string2):
+    """Check whether two strings differ while avoiding timing attacks.
+
+    This function returns True if the given strings differ and False
+    if they are equal.  It's careful not to leak information about *where*
+    they differ as a result of its running time, which can be very important
+    to avoid certain timing-related crypto attacks:
+
+        http://seb.dbzteam.org/crypto/python-oauth-timing-hmac.pdf
+
+    """
+    if len(string1) != len(string2):
+        return True
+
+    invalid_bits = 0
+    for a, b in zip(string1, string2):
+        invalid_bits += a != b
+
+    return invalid_bits != 0
